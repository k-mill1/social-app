{"version":3,"sources":["View.js","Add.js","App.js","reportWebVitals.js","index.js"],"names":["View","props","console","log","pages","map","current","Row","Card","style","width","Body","Header","className","id","Text","textAlign","post","Col","xs","Button","onClick","buttonHandler","postId","likes","Add","useState","state","changeState","toastr","options","closeButton","debug","extendedTimeOut","hideDuration","hideEasing","hideMethod","newestOnTop","onclick","positionClass","preventDuplicates","progressBar","showDuration","showEasing","showMethod","timeOut","clear","handleChange","event","newState","target","name","value","Form","onSubmit","e","preventDefault","newId","success","submitHandler","Group","controlId","Label","Control","type","placeholder","onChange","variant","App","changePages","useEffect","listContents","localStorage","getItem","JSON","parse","setItem","stringify","Navbar","expand","Brand","Toggle","Collapse","Nav","to","Container","path","prevState","updateListItems","exact","update","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee1c808e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nfunction View(props) {\r\n\r\n  // builds a card for each new post that's added\r\n  const buildRows = () => {\r\n      console.log(props)\r\n    return props.pages.map((current) => (\r\n       <Row key = {current.postId}>\r\n          <Card style={{width: '30rem'}}>\r\n            <Card.Body  >\r\n            <Card.Header className = 'username'>{current.id}</Card.Header>\r\n            <Card.Text style={{textAlign: 'justify'}} >\r\n                {current.post}\r\n            </Card.Text>\r\n            <Row>\r\n                <Col xs= 'auto'>\r\n                    <Button onClick = {() => props.buttonHandler(current.postId)}>Like</Button>\r\n                </Col>  \r\n                <Col xs= 'auto'> \r\n                    <h5>{current.likes}</h5>\r\n                </Col>\r\n            </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </Row>\r\n    ));\r\n  };\r\n\r\n  // displays the cards\r\n  return (\r\n    <>\r\n      {buildRows()}\r\n    </>\r\n  );\r\n\r\n}\r\nexport default View;\r\n","import React, {useState} from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport toastr from 'toastr';\r\nimport 'toastr/build/toastr.min.css'\r\nimport './App.css';\r\n\r\nfunction Add(props) {  \r\n\r\n    // sets up the initial state\r\n    const [state, changeState] = useState({\r\n        postId: 0, \r\n        id:'',\r\n        post:'',\r\n        likes: 0,\r\n    });\r\n\r\n    // pop-up confirmation that post has been added\r\n    toastr.options = {\r\n        closeButton: true,\r\n        debug: false,\r\n        extendedTimeOut: '3000',\r\n        hideDuration: '1000',\r\n        hideEasing: 'linear',\r\n        hideMethod: 'fadeOut',\r\n        newestOnTop: false,\r\n        onclick: null,\r\n        positionClass: 'toast-top-full-width',\r\n        preventDuplicates: true,\r\n        progressBar: true,\r\n        showDuration: '3000',\r\n        showEasing: 'swing',\r\n        showMethod: 'fadeIn',\r\n        timeOut: '5000'\r\n      };\r\n      toastr.clear();\r\n\r\n    // changes the state to whatever you have typed in the form\r\n    const handleChange = (event) => {\r\n        console.log(event);\r\n        const newState = {...state}; \r\n        newState[event.target.name] = event.target.value;\r\n        changeState(newState);\r\n    };\r\n\r\n    // sends the post to the view page\r\n    const submitHandler =(event) => {\r\n        event.preventDefault();  // prevents screen refreshing\r\n        const newId = state.postId + 1\r\n        props.onSubmit(state);\r\n        toastr.success('Post added');\r\n        changeState({postId: newId, id: '', post: '', likes: 0});\r\n    };\r\n\r\n    // form that's displayed on the page\r\n    return (\r\n    <div className = 'add-container'>\r\n    <Form onSubmit={(e) => submitHandler(e)}>\r\n        <Form.Group controlId = 'taskID'>\r\n            <Form.Label>Username</Form.Label>\r\n            <Form.Control name = 'id' \r\n            type = 'text'\r\n            placeholder = 'Username' \r\n            value={state['id']} \r\n            onChange={(e) =>{\r\n                handleChange(e);\r\n            }} \r\n            />           \r\n        </Form.Group>\r\n\r\n        <Form.Group controlId = 'userPost'>\r\n            <Form.Label>Post</Form.Label>\r\n            <Form.Control name = 'post'  type = 'text' placeholder = 'Post' value={state['post']}  onChange={(e) =>{\r\n                handleChange(e);\r\n            }} />\r\n        </Form.Group>\r\n        <br />\r\n        <Button variant = 'primary' type ='submit'>Add Post</Button>\r\n    </Form>\r\n    </div>\r\n);\r\n\r\n}\r\nexport default Add","import React, { useState, useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Container from 'react-bootstrap/Container';\nimport './App.css';\nimport View from './View'\nimport Add from \"./Add\";\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar'\n\nfunction App() {\n  const [pages, changePages] = useState([]);\n\n  // adds new post to the list and stores them in local storage\n  const updateListItems = (post) => {\n    console.log(post)\n    changePages((prevState) => [...prevState, post]);  //adds new post to the end of the array\n    localStorage.setItem('list', JSON.stringify([...pages, post]));  //stores in browser history\n  };\n\n  // increments the number of likes on click\n  const buttonHandler = (id) => {\n    const update = pages.map(post => post.postId === id ? { ...post, likes: post.likes +1 } : post)\n    changePages(update) \n  }\n  \n  // changes pages to contents in the local storage or an empty array at initial render\n  useEffect(() => {\n    // localStorage.removeItem('list') // clears local storage\n    const listContents = localStorage.getItem('list');\n    changePages(JSON.parse(listContents) || []);\n  }, []);\n\n  // updates local storage whenever the state of pages changes\n  useEffect(() => {\n    localStorage.setItem('list', JSON.stringify([...pages]));\n  }, [pages]);\n\n  // displays the entire app\n  return (\n    <Router>\n      <Navbar id = 'navbar-header' expand = 'md'>\n        <Navbar.Brand>Social App</Navbar.Brand>\n        <Navbar.Toggle aria-controls = 'basic-navbar-nav'></Navbar.Toggle>\n        <Navbar.Collapse id = 'basic-navbar-nav'>\n          <Nav className = 'mr-auto'>\n\n            <Link className = 'nav-link' to = '/'>\n              View\n            </Link>\n            <Link className = 'nav-link' to = '/add'>\n              Add\n            </Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <Container>\n        <Switch>\n          <Route path = '/add'>\n            <Add onSubmit={(post) => updateListItems(post)} />\n          </Route>\n          <Route exact path = '/'>\n            <View pages={pages} buttonHandler = {(id) => buttonHandler(id)} />\n          </Route>\n          <Route path = '/'>Error: 404 not found</Route>\n        </Switch>\n      </Container>\n    </Router>\n  );\n}\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}